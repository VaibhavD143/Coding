DFS Applicatins:
    - path finding(not shortes path)
    - check wether graph is bipartite(can be divided into two sets, where no edge within a set):
        assign alternate color, if any clash then not bi-pi graph
    - topological sort
    - Detecting cycle in directed Graph or undirected:
        if back edge exist! 
    - strongly connected components

BFS Applicatins:
    - Shortest path between two nodes
    - in a web crawler
    - peer to peer network like BitTorrent
    - Social Networking website
    - Broadcasting : Broadcast through nearest node available
    - GPS : finds neares node 
    - Cycle Detection in directed graph:
        - count in-degree
        - iterate on 0 in-degree nodes and decreament their neighbours
        - if all are visited then False,else True

Topological sort:
    - DFS :
        - DFS on graph, add to the stack after visiting all the adjacents
        - topological order : starting from the last added element
    - Kahn's Algorithm:
        - in-degree and out-degree count of the nodes(Kahn's Algorithm)

Strongly Connected Graph:
	- A directed graph is strongly connected if there is a path between all pairs of vertices. A strongly connected component (SCC) of a directed graph is a maximal strongly connected subgraph.
    - Is SC?
        - Undirected Graph:
            - DFS from any node
        - Directed Graph:
            - Leverage Kosarjun's Algorithm : DFS from v (all nodes are reachable from v), transpose of graph, again DFS from v(v is reachable from all the nodes)
            - https://www.geeksforgeeks.org/connectivity-in-a-directed-graph/
    - Strongly connected components:
        - Directed Graph:
            - Kosarjun's Algo:
                - DFS over all the nodes, add to the stack after visiting adjacents (topological sort)
                - transpose graph
                - Pop node from stack and do normal DFS. each iteration will give one SCC.
                - https://www.geeksforgeeks.org/strongly-connected-components/
            - Tarjan's Algo:
                - 


Minimum spanning tree (MST):
- It is only for undirected graphs
- Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together.
- Prim's:
    - Start from any node and go to minimum length edge.
    - Take edge if it does not create a cycle (visited array would be suffiecient)
    - do it for V-1 times

- Krushkal:
    - Start from minimum edge and keep selecting minimum length edge
    - Include if it does not create a cycle (union find algorithm)
    - do it for V-1 times

Pending:

Euclrean path:
- visit all edges excatly once

Euclrean CKT:
- visit all edges excatly once and start and end are same vertex

Bridge:


Articulation point:


Mother vertex:
    - A vertex u from which there exists path to every other vertex
    algo:
        - apply DFS from any vertex and keep trace of last finished vertex v
        - now, if mother vertex exist in a graph then v is one of them
        - apply DFS from v and if it reaches all the nodes then that's out mother vertex
