*) How do we decide data structure?
- 	which type of data we are dealing with
	Which type of operations we are going to perform
	Reduce memory is also a factor some time

*) Trie DataStructer/Prefix Tree:
1) Autocomplete
2) spell checker
3) ip address routing table: where we are supposed to find longest prefix matching ip from routing table

- avoid defaultdict if possible, very expensive

- work on single index if possibile, it will increases hit in cache and looping would be faster

There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings.
Then why do we need trie? Although hash table has O(1) time complexity for looking for a key, it is not efficient in the following operations :

-   Finding all keys with a common prefix.
-   Enumerating a dataset of strings in lexicographical order.

Another reason why trie outperforms hash table, is that as hash table increases in size,
there are lots of hash collisions and the search time complexity could deteriorate to O(n),
where n is the number of keys inserted. Trie could use less space compared to Hash Table when storing many keys with the same prefix.
In this case using trie has only O(m) time complexity, where mm is the key length. Searching for a key in a balanced tree costs O(mlogn) time complexity.

*) Delete node whose only pointer is given and no head pointer:
- copy data from next pointer, and delete next node

*) Number of binary search tree from N unique numbers:
- C(2n,n)/(n+1)

*) power(A,power(B,C), M) = power(A,power(B,C,M-1),M))

*) Derangement formula : Dp[i] = (i-1)*(dp[i-1]+dp[i-2])

*) Bit manipulation:
- x & (x-1) : will clear the lowest set bit of x
- x & -x : will get you lowest set bit of x
- x | (x + 1) : x with the lowest cleared bit set.
For iterating over all possible submasks of mask
sub = mask
while sub:
    "our logic"
    sub =(sub-1)&mask
very important
- https://cp-algorithms.com/algebra/all-submasks.html

Don't understand
- x & (x + (1 << n)) = x, with the run of set bits (possibly length 0) starting at bit n cleared.
- x & ~(x + (1 << n)) = the run of set bits (possibly length 0) in x, starting at bit n.
- x | ~(x + 1) = extracts the lowest cleared bit of x (all others are set).
- x | (x - (1 << n)) = x, with the run of cleared bits (possibly length 0) starting at bit n set.
- x | ~(x - (1 << n)) = the lowest run of cleared bits (possibly length 0) in x, starting at bit n are the only clear bits.

*) XOR : 
-   (x ^ y) == (x | y) - (x & y) >= |y - x|
-   so within a 2^(n-1) to 2^(n) - 1 range any two number will have the minimum xor, use binary values to see and u will realize!

*) Counting sort and Radix sort:
- Radix sort uses Counting Sort as a subroutine, we do counting sort on each digit.

*) swap two variables:
-   a=a^b
    b=a^b
    a=a^b

*) 32-bit range = -2*(32-1) to (2**(32-1))-1

*) Prime factorization:
-   in general case sscenario we run a loop from 2 to sqrt(n)
-   for multiple queries, we can precompute minimum prime divisior of a number by seive method and then find prime factors in log(n).
    - divide number with their smallest prime divisior and keep dividing it until it becomes 1!
    -https://www.geeksforgeeks.org/prime-factorization-using-sieve-olog-n-multiple-queries/

*) Subset sum divisible by k: if `n` is length of array given, so if n>k then there will always be a subset which is divisible by k.

*) Sub matrix max sum, sum zero, sum target. Inshort related to prefix sum in matrix. Most cases we convert it into 1-D problem and then solve it.
Convert into 1-d as per the question.
refrence : https://www.techiedelight.com/find-maximum-sum-submatrix-in-given-matrix/

*) Binary lifting : https://leetcode.com/problems/kth-ancestor-of-a-tree-node/

*)Hadlock's algorithm :  Shortest path in a grid between two cells.
https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/107396/Python-solution-based-on-wufangjie's-(Hadlock's-algorithm)

*) Pattern Searching Algorithms:
m = len(pattern) n=len(text)
Preprocesses pattern:
KMP : bestest love, preprocess and find lps and then find patter. O(m+n) = O(n).
Rabin-karp : rolling hashing, average(m+n) worst(mn) (usedn in longest substring occurance more than once in a string)
Z-array : pattern$text, Z[i] stores length of string starting from i and matching with prefix
Boyer-moore : O(m+n) and O(mn) in worst case. Preprocess pattern to shift more than one character. look into gfg
Preprocess Text:
suffix tree: it is used when there are multiple patter queries and minimal change in text
Build a trie of all the suffix string of text.
now look for a patter same way we look into trie data structure.
store index in node if index numbers are asked

*) Custom comparator:
class Solution:
    # @param A : tuple of integers
    # @return a strings
    def largestNumber(self, A):
        class Compare(str):
            def __lt__(str1, str2):
                return int(str1+str2)>int(str2+str1)
        A= map(str,A)
        A = sorted(A,key=Compare)
        res= ''.join(A).lstrip('0')
        return  res if res else '0'

*) Slope representation as a tuple:
    - to avoid precision issue in slope, we can representate them as tuple like slope 1/3,2/6,3/9 as (1,3)
    - that, this is representate slope as coprime integers

*) To make two numbers co-prime of each other :
    - Find gcd of both numbers and divide both number with gcd, resulting number would be co-prime of each other
    - ex : a =12,b=30 gcd = 6 a=2 b=5

*) Mod with negative number will return negative number
x = ((x % k) + k) % k ;

*) How to rotate co-ordinates in graph:
https://leetcode.com/discuss/interview-question/396418/Amazon-or-OA-2019-or-Point-of-Lattice

*) Bubling down process:
- find smallest k pairs from given two sorted arrays (bubbling down)
https://leetcode.com/problems/find-k-pairs-with-smallest-sums/discuss/84550/Slow-1-liner-to-Fast-solutions

*) egg drop problem:
- 2 egss K floors
    - f[n] = min(max(x, f(n-x)) for x in [1,n])
    - O(1) co-efficient is possible
        - x + (x-1) + (x-2) + .... + 2 + 1 = x*(x + 1) /2 >= k
- n eggs k floors
    - f[trial][eggs] = f[trial-1][eggs-1] + f[trial-1][eggs] + 1
    - https://leetcode.com/problems/super-egg-drop/

*) Tree Definitions:
- Full Binary tree : All nodes have either 0 or 2 children
- Complete Binary tree : All the levels are completely filled except last level. Last level have all the nodes places left most.
- Perfect Binary Tree: All leaf nodes are at same level and all the Internal nodes have either 2 children
- Balanced Binary Tree: Height of the tree is log(N). Height difference betweenany two leaf node would be no more than 1
- Degenerate/Skewed Tree: Every internal node has only one child

*) Farthest node distance from each node:
- For each node, diameter's either of the node is Farthest

*) Prefix, infix, suffix expression:
- position of the operator is different
- infix is normal expression
- Prefix to infix:
    - Read in reverse
- Postfix to infix:
    - Read from the front
push operand and evaluate when operator