*) How do we decide data structure?
- 	which type of data we are dealing with
	Which type of operations we are going to perform
	Reduce memory is also a factor some time

*) Trie DataStructer/Prefix Tree:
1) Autocomplete
2) spell checker
3) ip address routing table: where we are supposed to find longest prefix matching ip from routing table

There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings.
Then why do we need trie? Although hash table has O(1) time complexity for looking for a key, it is not efficient in the following operations :

-   Finding all keys with a common prefix.
-   Enumerating a dataset of strings in lexicographical order.

Another reason why trie outperforms hash table, is that as hash table increases in size,
there are lots of hash collisions and the search time complexity could deteriorate to O(n),
where n is the number of keys inserted. Trie could use less space compared to Hash Table when storing many keys with the same prefix.
In this case using trie has only O(m) time complexity, where mm is the key length. Searching for a key in a balanced tree costs O(mlogn) time complexity.

*) Delete node whose only pointer is given and no head pointer:
- copy data from next pointer, and delete next node

*) Bit manipulation:
- x & (x-1) : will clear the lowest set bit of x
- x & ~(x-1) : extracts the lowest set bit of x (all others are clear). Pretty patterns when applied to a linear sequence.i.e 6&~5 := 110&~101 = 10 := 2
- x | (x + 1) = x with the lowest cleared bit set.
Don't understand
- x & (x + (1 << n)) = x, with the run of set bits (possibly length 0) starting at bit n cleared.
- x & ~(x + (1 << n)) = the run of set bits (possibly length 0) in x, starting at bit n.
- x | ~(x + 1) = extracts the lowest cleared bit of x (all others are set).
- x | (x - (1 << n)) = x, with the run of cleared bits (possibly length 0) starting at bit n set.
- x | ~(x - (1 << n)) = the lowest run of cleared bits (possibly length 0) in x, starting at bit n are the only clear bits.